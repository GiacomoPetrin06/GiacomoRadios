@page "/"

@using GiacomoRadios.Code;
@using System;
@using System.Media;
@inject RadioService RadioService
@inject IJSRuntime JSRuntime
@inject HttpClient http;

<PageTitle>Radio</PageTitle>

<label class="switch">
    <input type="checkbox" @onchange="ChangeTheme">
    <span class="slider"></span>
</label>
<p></p>

<select class="btn_CercaGeneri" @onchange="Ricerca">
    @foreach (var genere in tipiGeneri)
    {
        <option class="btn_CercaGeneri" value=@genere>@genere</option>
    }
</select>

<button class="btn-preferiti" @onclick="() => ViewPreferiti(Preferiti)">Visualizza Preferiti</button>

<button class="btn-filtri-Notiziari" @onclick="() => RicercaNotiziari() ">Visualizza Radio Sulle Notizie</button>
<button class="btn-filtri-Rock" @onclick="() => RicercaRock() ">Visualizza Radio Rock</button>
<button class="btn-filtri-Popolari" @onclick="() => RicercaPopolare() ">Visualizza Radio Popolari</button>
<button class="btn-filtri-Pop" @onclick="() => RicercaPop() ">Visualizza Radio Pop</button>

<p></p>


<audio id="radioPlayer" controls style="display: none;">
    @if (!string.IsNullOrEmpty(currentRadio.UrlAudio))
    {
        <source src="@currentRadio.UrlAudio" type="audio/mpeg">
        <source src="@currentRadio.UrlAudio" type="audio/wav">
        <source src="@currentRadio.UrlAudio" type="audio/ogg">
        <source src="@currentRadio.UrlAudio" type="audio/aac">
        <source src="@currentRadio.UrlAudio" type="audio/flac">
        <source src="@currentRadio.UrlAudio" type="audio/webm">
        <source src="@currentRadio.UrlAudio" type="audio/x-ms-wma">
    }
</audio>

<div class="radio-container">
    @foreach (var radio in ListViewRadio)
    {
        <div class="radio-card">
            <img style="border:1px solid white; " src="@radio.ImgIcona" alt="@radio.Title" />

            <h4 class="radio-card-Text" style="border:1px solid white;" title="@radio.Title">
                @radio.Title;
            </h4>

            <h5 class="radio-card-Text" style="color:@GetGenereColor(radio.Genere)">
                @radio.Genere
            </h5>

            <button class="btn-play" @onclick="() => PlayPauseRadio(radio)">
                @(IsPlay(radio) ? "Pause" : "Play")
            </button>

            <button class="btn-preferiti" @onclick="() => AddToPreferiti(radio)">
                Preferiti
                <span class="@caricaImgCuore(radio)"></span>
            </button>
        </div>
    }
</div>

<script>
    window.changeCss = function (newSource) {
        var css = document.getElementById('style');
        css.href = newSource;
    };
</script>

@code {
    // variabili
    private List<Radio> ListRadio { get; set; } = new List<Radio>(); // lista di radio
    private List<Radio> ListViewRadio { get; set; } = new List<Radio>(); // lista di radio in visualizzazione
    private List<Radio> Preferiti { get; set; } = new List<Radio>(); // lista di radio preferite dall'utente
    private Radio currentRadio = new Radio(); // la radio attualmente in riproduzione

    private List<string> tipiGeneri = new List<string>(); // lista dei tipi di generi


    // metodi / funzioni
    protected override async Task OnInitializedAsync() // metodo per inizializzare le variabili sopra citate
    {
        if (RadioService != null)
        {
            ListRadio = await RadioService.GetRadios();
            ListViewRadio = ListRadio;
            caricaGeneri();
        }
        else
        {
            Console.WriteLine("RadioService is null");
        }
    }

    private async Task PlayPauseRadio(Radio radio)
    {
        currentRadio = radio;
        switch (await IsPlaying(radio))
        {
            case true:
                await PauseAudio();
                break;

            case false:
                await PlayAudio();
                break;
        }
    }

    private async Task PlayAudio()
    {
        // Imposta la sorgente audio e avvia la riproduzione
        await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('radioPlayer').load()");
        await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('radioPlayer').play()");
    }

    private async Task PauseAudio()
    {
        // Metti in pausa la riproduzione audio
        await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('radioPlayer').pause();");
        currentRadio = new Radio();
    }

    private async Task<bool> IsPlaying(Radio radio)
    {
        return !await IsPaused(radio);
    }

    private bool IsPlay(Radio radio)
    {
        return currentRadio.Id == radio.Id && !string.IsNullOrEmpty(radio.UrlAudio);
    }

    private async Task<bool> IsPaused(Radio radio)
    {
        try
        {
            // Start the task.
            var paused = await JSRuntime.InvokeAsync<bool>("eval", "document.getElementById('radioPlayer').paused");

            // Await the task.
            return paused;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            return true; // Restituisci true se c'è un errore, per considerare la radio in pausa
        }
    }

    public void Ricerca(ChangeEventArgs e) // metodo che Ricercare dato un evento
    {
        if (ListViewRadio == null || !ListViewRadio.Any())
        {
            ListViewRadio = new List<Radio>();
        }

        if (e.Value.ToString() == "TUTTE")
        {
            ListViewRadio = ListRadio;
            return;
        }
        ListViewRadio = ListRadio.FindAll(x => x.Genere == e.Value.ToString());
    }

    private bool IsViewNotiziariOn = false;
    public void RicercaNotiziari()
    {
        if(IsViewNotiziariOn == false)
        {
            if (ListViewRadio == null || !ListViewRadio.Any())
            {
                ListViewRadio = new List<Radio>();
            }
            ListViewRadio = ListRadio.FindAll(x => x.Genere == "Notiziario");
            IsViewNotiziariOn = true;
        }
        else
        {
            ListViewRadio = ListRadio;
        }
    }

    private bool IsViewRockOn = false;
    public void RicercaRock()
    {
        if (IsViewRockOn == false)
        {
            if (ListViewRadio == null || !ListViewRadio.Any())
            {
                ListViewRadio = new List<Radio>();
            }
            ListViewRadio = ListRadio.FindAll(x => x.Genere == "ROCK");
            IsViewRockOn = true;
        }
        else
        {
            ListViewRadio = ListRadio;
        }
    }

    private bool IsViewPopolareOn = false;
    public void RicercaPopolare()
    {
        if (IsViewPopolareOn == false)
        {
            if (ListViewRadio == null || !ListViewRadio.Any())
            {
                ListViewRadio = new List<Radio>();
            }
            ListViewRadio = ListRadio.FindAll(x => x.Genere == "Popolare");
            IsViewPopolareOn = true;
        }
        else
        {
            ListViewRadio = ListRadio;
        }        
    }

    private bool IsViewPopOn = false;
    public void RicercaPop()
    {
        if (IsViewPopOn == false)
        {
            if (ListViewRadio == null || !ListViewRadio.Any())
            {
                ListViewRadio = new List<Radio>();
            }
            ListViewRadio = ListRadio.FindAll(x => x.Genere == "POP");
            IsViewPopOn = true;
        }
        else
        {
            ListViewRadio = ListRadio;
        }
    }

    public void caricaGeneri() // metodo che controlla i generi presenti, e ne aggiunge nuovi nel caso non siano già presenti
    {
        tipiGeneri.Insert(0, "TUTTE");
        foreach (var radio in ListViewRadio)
        {
            if (radio.Genere != tipiGeneri.Find(x => x == radio.Genere))
            {
                tipiGeneri.Add(radio.Genere);
            }
        }
    }

    public void AddToPreferiti(Radio radio) // metodo che aggiunge una radio all'elenco delle preferite
    {
        if (!Preferiti.Contains(radio))
        {
            Preferiti.Add(radio);
        }
        else
        {
            Preferiti.RemoveAt(Preferiti.FindIndex(x => x == radio));
        }
    }

    private bool IsViewPreferitiOn = false;
    public void ViewPreferiti(List<Radio> preferiti)
    {
        IsViewPreferitiOn = !IsViewPreferitiOn;
        ListViewRadio = IsViewPreferitiOn ? preferiti : ListRadio;
    }

    public string caricaImgCuore(Radio radio) // metodo per ottenere la classe del cuore
    {
        return Preferiti.Contains(radio) ? "heart-icon filled" : "heart-icon";
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value;
        if (isChecked)
        {
            await JSRuntime.InvokeVoidAsync("changeCss", "css/appDark.css");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("changeCss", "css/app.css");
        }
    }

    private string GetGenereColor(string genere)
    {
        return genereColors.ContainsKey(genere) ? genereColors[genere] : "transparent";
    }

    // colori per i generi
    private Dictionary<string, string> genereColors = new Dictionary<string, string>
    {
        { "Popolare", "orange" },
        { "Popolare Italiana", "brown" },
        { "Popolare 70 80", "yellow" },
        { "Notiziario", "blue" },
        { "ROCK", "red"},
        { "REGGAETON", "darkred"},
        { "Musica Classica", "green"},
        { "POP", "lightblue"},
        { "FUNK", "pink"},
        { "JAZZ 70 80", "purple" },
        { "QUIZ 70 80", "gray" }
    };
}

